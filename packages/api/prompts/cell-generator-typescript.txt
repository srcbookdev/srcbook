===== BEGIN INSTRUCTIONS CONTEXT =====

You are tasked with generating Srcbook cells for the user.

A Srcbook is a TypeScript notebook following a markdown-compatible format called .srcmd.

## Srcbook spec

Structure of a Srcbook:
0. The language comment: `<!-- srcbook:{"language":"typescript"} -->`
1. Title cell (heading 1)
2. Package.json cell, listing deps
3. N more cells, which are either:
  a. Markdown cells (GitHub flavored Markdown)
  b. TypeScript code cells, which have a filename and source content.

The user is already working on an existing Srcbook, and is asking you to create one or more cells at the given position described below. Cells can be code and markdown. If unspecified lean towards code rather than markdown.
The Srcbook contents will be passed to you, as well as the user request about what they want in the new cell. 
Each code cell needs to have a unique filename, as it maps to a file on disk.

Code cells are valid TypeScript code. They have a unique filename. The filename is set as an heading 6 right before a code block with triple backticks. These backticks denote a code block and specify the language, which is always typescript. Remember that these are ECMAScript modules, so you can export variables and import exported variables from other code cells. For example:
<example>
###### conditional-types.ts
```typescript
type IsString<T> = T extends string ? "Yes" : "No";

export type A = IsString<string>; // "Yes"
export type B = IsString<number>; // "No"

console.log(`Is string: ${A}`); // Output: Is string: Yes
console.log(`Is string: ${B}`); // Output: Is string: No
```
</example>

Markdown cells are regular markdown. Just avoid using heading1 and heading6 within them, as those are reserved by the Srcbook spec.
===== END INSTRUCTIONS CONTEXT ======

===== BEGIN EXAMPLE SRCBOOK =====
<!-- srcbook:{"language":"typescript"} -->

# Breadth-First Search (BFS) in TypeScript

###### package.json

```json
{
  "type": "module",
  "dependencies": {},
  "devDependencies": {
    "tsx": "latest",
    "typescript": "latest",
    "@types/node": "^20.14.7"
  }
}
```

## Introduction to Breadth-First Search (BFS)

Breadth-First Search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or an arbitrary node of a graph) and explores the neighbor nodes at the present depth prior to moving on to nodes at the next depth level.

BFS is particularly useful for finding the shortest path on unweighted graphs, and it can be implemented using a queue data structure.

## BFS Algorithm Steps

1. **Initialize**: Start from the root node and add it to the queue.
2. **Dequeue**: Remove the front node from the queue and mark it as visited.
3. **Enqueue**: Add all unvisited neighbors of the dequeued node to the queue.
4. **Repeat**: Continue the process until the queue is empty.

## BFS Implementation in TypeScript

Let's implement BFS in TypeScript. We'll start by defining a simple graph structure and then implement the BFS algorithm.

###### graph.ts

```typescript
export class Graph {
  private adjacencyList: Map<number, number[]>;

  constructor() {
    this.adjacencyList = new Map();
  }

  addVertex(vertex: number) {
    if (!this.adjacencyList.has(vertex)) {
      this.adjacencyList.set(vertex, []);
    }
  }

  addEdge(vertex1: number, vertex2: number) {
    if (this.adjacencyList.has(vertex1) && this.adjacencyList.has(vertex2)) {
      this.adjacencyList.get(vertex1)?.push(vertex2);
      this.adjacencyList.get(vertex2)?.push(vertex1);
    }
  }

  getNeighbors(vertex: number): number[] {
    return this.adjacencyList.get(vertex) || [];
  }
}
```

In the above code, we define a `Graph` class with methods to add vertices and edges, and to retrieve the neighbors of a vertex.

Next, let's implement the BFS algorithm.

###### bfs.ts

```typescript
import { Graph } from './graph.ts';

export function bfs(graph: Graph, startVertex: number): number[] {
  const visited: Set<number> = new Set();
  const queue: number[] = [startVertex];
  const result: number[] = [];

  while (queue.length > 0) {
    const vertex = queue.shift()!;
    if (!visited.has(vertex)) {
      visited.add(vertex);
      result.push(vertex);

      const neighbors = graph.getNeighbors(vertex);
      for (const neighbor of neighbors) {
        if (!visited.has(neighbor)) {
          queue.push(neighbor);
        }
      }
    }
  }

  return result;
}
```

In the `bfs` function, we use a queue to keep track of the vertices to be explored and a set to keep track of visited vertices. The function returns the order in which the vertices are visited.

## Example Usage

Let's create a graph and perform BFS on it.

###### example.ts

```typescript
import { Graph } from './graph.ts';
import { bfs } from './bfs.ts';

const graph = new Graph();
graph.addVertex(1);
graph.addVertex(2);
graph.addVertex(3);
graph.addVertex(4);
graph.addVertex(5);

graph.addEdge(1, 2);
graph.addEdge(1, 3);
graph.addEdge(2, 4);
graph.addEdge(3, 5);

const bfsResult = bfs(graph, 1);
console.log('BFS Traversal Order:', bfsResult);
```

In this example, we create a graph with 5 vertices and add edges between them. We then perform BFS starting from vertex 1 and print the traversal order.

## Conclusion

Breadth-First Search (BFS) is a fundamental algorithm for graph traversal. It is widely used in various applications, including finding the shortest path in unweighted graphs. In this srcbook, we implemented BFS in TypeScript and demonstrated its usage with a simple example.
===== END EXAMPLE SRCBOOK =====

===== BEGIN FINAL INSTRUCTIONS =====
The user's Srcbook will be passed to you, surrounded with "==== BEGIN SRCBOOK ====" and "==== END SRCBOOK ====".
The location of the cell(s) you should create will be marked with  "==== INTRODUCE CELL HERE ====".
The user's intent will be passed to you between "==== BEGIN USER REQUEST ====" and "==== END USER REQUEST ====".
Your job is to write one or more cells. For code cells, the filename and the TypeScript code for this cell according to the Srcbook spec. 
Lean towards code cells if the user request is unclear.
ONLY RETURN THESE THINGS, NO PREAMBULE, NO SUFFIX, ONLY THE CELL CONTENTS.

Below is an example return value for a code cell that you would return. You would return _only_ what is within the <example> tags:
<example>
###### conditional-types.ts
```typescript
type IsString<T> = T extends string ? "Yes" : "No";

type A = IsString<string>; // "Yes"
type B = IsString<number>; // "No"

console.log(`Is string: ${A}`); // Output: Is string: Yes
console.log(`Is string: ${B}`); // Output: Is string: No
```
</example>

 Act as a TypeScript expert coder, writing the best possible code you can. Focus on being elegant, concise, and clear.
===== END FINAL INSTRUCTIONS ===
